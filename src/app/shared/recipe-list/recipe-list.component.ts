import {Component, Input, OnInit} from '@angular/core';
import {RecipesService} from '../../services/recipes.service';
import {Recipe} from '../../models/recipe';
import {Observable} from 'rxjs/Rx';
import {Subject} from 'rxjs/Subject';
import 'rxjs/add/operator/distinctUntilChanged';
import {FormControl} from '@angular/forms';

@Component({
  selector: 'app-recipe-list',
  templateUrl: './recipe-list.component.html',
  styleUrls: ['./recipe-list.component.css'],
  providers: [RecipesService]
})
export class RecipeListComponent implements OnInit {

  @Input()
    title: string;

  selectedRecipe;

  myControl: FormControl;  // control for keywords filter
  filteredKeywords: Observable<string[]>;

  // should be generated by services
  keywords = [
    'cake',
    'chocolate',
    'cheese'
  ];

  // declare two Observable
  total$: Observable<number>;
  items$: Observable<Recipe[]>;

  page = 1;
  terms = '';

  private searchTermStream = new Subject<string>();
  private pageStream = new Subject<number>();

  constructor(protected recipeService: RecipesService) {
    this.title = 'Our Recipes';
    this.myControl = new FormControl();
  }

  ngOnInit() {

    // filter the keyword according to user input using FormControl
    this.filteredKeywords = this.myControl.valueChanges
      .startWith(null)
      .map(val => val ? this.filter(val) : this.keywords.slice());

    const searchResult = this.searchTermStream
      .debounceTime(1000)
      .distinctUntilChanged()
      .map(searchTerm => {
        this.terms = searchTerm;
        return {search: searchTerm, page: 1};
      });

    const pageResult = this.pageStream.map(pageNum => {
      this.page = pageNum;
      return {search: this.terms, page: pageNum};
    });

    const finalResult = Observable.from(pageResult)
      .merge(Observable.from(searchResult))
      .startWith({search: this.terms, page: this.page})
      .switchMap((params: {search: string, page: number}) => {
        return this.recipeService.list(params.search, params.page);
      })
      .share();


    // test only
    finalResult.subscribe(val => console.log(val))

    this.total$ = finalResult.pluck('total');
    this.items$ = finalResult.pluck('items');
    this.total$.subscribe(val => console.log(val));
    this.items$.subscribe(val => console.log(val));
  }

  search(terms: string) {
    this.searchTermStream.next(terms);
  }

  goToPage(page: number) {
    this.pageStream.next(page);
  }


  // filter keywords
  filter(val: string): string[] {
    return this.keywords.filter(keyword => new RegExp(`^${val}`, 'gi').test(keyword));
  }


}
